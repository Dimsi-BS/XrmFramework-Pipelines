# Copyright DIMSI

parameters:
  - name: SolutionFile
    displayName: Path to the solution file
    type: string
    default:

  - name: ConfigFolderPath
    displayName: Path to the Config folder
    type: string
    default:

  - name: PowerPlatformSPN
    displayName: Service connection to PowerPlatform
    type: string

  - name: solutions
    displayName: List of solutions
    type: object

  - name: solutionsImportOrder
    displayName: Solutions import order
    type: object

  - name: plugins
    type: object 
    default: []

  - name: webResources
    displayName: List of Webresources projects
    type: object
    default: []

  - name: extractSolutions
    displayName: Do we need to extract solutions to the repository
    type: boolean
    default: true

  - name: disableQualityCheck
    displayName: Do we need disable quality check
    type: boolean
    default: false

  - name: skipBuildJob
    displayName: Skip the build part of the pipeline
    type: boolean
    default: false

  - name: variableGroup
    displayName: Name of the common variable group
    type: string

  - name: installNbgvTool
    displayName: Install NBGV tool to the agent
    type: boolean
    default: false

  - name: environments
    displayName: List of environments
    type: object
    default: 
      - name: UAT
        variableGroup: GoupUAT
        PowerPlatformSPN:
        pool:
        setAdminModeOnDeploy: true

  - name: azureFunctions
    displayName: List of Azure Functions
    type: object
    default: []

  - name: webApplications
    displayName: List of web applications
    type: object
    default: []

  - name: beforeSolutionExportUsersteps
    type: stepList
    default: []

variables:
  - ${{ if not(eq(parameters.variableGroup, '')) }}:
    - group: '${{ parameters.variableGroup }}'
  - name: BRANCH_NAME
    value: $[replace(variables['Build.SourceBranch'], 'refs/heads/', '')]
  - name: buildPlatform
    value: 'Any CPU'
  - name: buildConfiguration
    value: 'Release'
  - name: xrmFrameworkPath
    value: 'xrmFramework'
  - name: srcPath
    value: src

stages:
  - stage: Preparation
    displayName: Build and extract
    jobs:
      - ${{ if not(parameters.skipBuildJob) }}:
        - job: BuildProjects
          steps :
            - checkout: self
              persistCredentials: true
              fetchDepth: 0
              clean: true
              path: 's/${{ variables.srcPath }}'
            - checkout: xrmFramework
              path: 's/${{ variables.xrmFrameworkPath }}'
  
            - powershell: Install-Module -Name VstsTaskSdk -RequiredVersion 0.11.0 -Scope CurrentUser
            - task: PowerShell@2
              displayName: 'Creating Connection Strings'
              inputs:
                targetType: 'filePath'
                filePath: '${{ variables.xrmFrameworkPath }}/scripts/ConnectionStringsCreation/ConnectionStringsCreation.ps1'
                ${{ if not(eq(parameters.ConfigFolderPath, '')) }}:
                  inputs: >
                    - authenticationType: 'PowerPlatformSPN'
                    - PowerPlatformSPN: '${{ parameters.PowerPlatformSPN }}'
                    - ConnectionStringsConfigPath: ${{ parameters.ConfigFolderPath }}/connectionStrings.json
                    - XrmFrameworkConfigPath: ${{ parameters.ConfigFolderPath }}/xrmFramework.json
                ${{ else }}:
                  inputs: >
                    - authenticationType: 'PowerPlatformSPN'
                    - PowerPlatformSPN: '${{ parameters.PowerPlatformSPN }}'
#                ${{ if not(eq(parameters.ConfigFolderPath, '')) }}:
#                  - ConnectionStringsConfigPath: ${{ parameters.ConfigFolderPath }}/connectionStrings.json
#                  - XrmFrameworkConfigPath: ${{ parameters.ConfigFolderPath }}/xrmFramework.json
       
  
            - script: dotnet build --configuration $(buildConfiguration) ${{ parameters.SolutionFile }}
              displayName: 'dotnet build $(buildConfiguration)'
  
            - ${{ each plugin in parameters.plugins }}:
              - task: PowerShell@2
                displayName: Deploying plugin ${{ plugin.name }}
                inputs:
                  targetType: 'filePath'
                  filePath: '${{ variables.xrmFrameworkPath }}/scripts/DeployPlugins/DeployPlugins.ps1'
                  inputs: >
                    - authenticationType: 'PowerPlatformSPN'
                    - PowerPlatformSPN: '${{ parameters.PowerPlatformSPN }}'
                    - PluginProjectPath: '${{ plugin.projectPath }}'
                    - SolutionName: ${{ plugin.solution }}
#                  ${{ if not(eq(plugin.deployProjectPath, '')) }}:
#                    - DeployProjectPath: '${{ plugin.deployProjectPath }}'
  
            - ${{ each web in parameters.webResources }}:
              - task: PowerShell@2
                displayName: Deploying webresources from ${{ web.name }}
                inputs:
                  targetType: 'filePath'
                  filePath: '${{ variables.xrmFrameworkPath }}/scripts/DeployWebResources/DeployWebResources.ps1@xrmFramework'
                  inputs: >
                    - authenticationType: 'PowerPlatformSPN'
                    - PowerPlatformSPN: '${{ parameters.PowerPlatformSPN }}'
                    - WebresourcesProjectPath: '${{ web.projectPath }}'
                    - SolutionName: ${{ web.solution }}
#                  ${{ if not(eq(web.deployProjectPath, '')) }}:
#                    - DeployProjectPath: '${{ web.deployProjectPath }}'
  
            - ${{ each azureFunction in parameters.azureFunctions }}:
              - task: DotNetCoreCLI@2
                displayName: Publish ${{ azureFunction.name }}
                inputs:
                  command: 'publish'
                  publishWebProjects: false
                  projects: '${{azureFunction.projectPath}}/${{azureFunction.name}}.csproj'
                  arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)'
                  zipAfterPublish: True
  
            - ${{ each webApp in parameters.webApplications }}:
              - task: DotNetCoreCLI@2
                displayName: Publish ${{ webApp.name }}
                inputs:
                  command: 'publish'
                  publishWebProjects: true
                  projects: '${{webApp.projectPath}}/${{webApp.name}}.csproj'
                  arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)'
                  zipAfterPublish: True
  
            - ${{ if not(or(eq(parameters.azureFunctions, ''), eq(length(parameters.azureFunctions), 0))) }}:
              - publish: $(Build.ArtifactStagingDirectory)
                artifact: azureFunctions
                displayName: Publishing artifacts
  
            - ${{ if not(or(eq(parameters.webApplications, ''), eq(length(parameters.webApplications), 0))) }}:
              - publish: $(Build.ArtifactStagingDirectory)
                artifact: webApplications
                displayName: Publishing artifacts

      - job: ExportSolutions
        ${{ if not(parameters.skipBuildJob) }}:
          dependsOn: BuildProjects
          condition: and(succeeded(), or(eq(variables.disableSolutionExport, ''), eq(variables.disableSolutionExport, false)))
        ${{ if parameters.skipBuildJob }}:
          condition: or(eq(variables.disableSolutionExport, ''), eq(variables.disableSolutionExport, false))
        steps:
          - checkout: self
            persistCredentials: true
            fetchDepth: 0
            clean: true

          - ${{ if parameters.installNbgvTool }}:
            - task: DotNetCoreCLI@2
              displayName: Install NBGV tool
              inputs:
                command: custom
                custom: tool
                arguments: install --tool-path . nbgv

          - pwsh: nbgv cloud -a
            displayName: Set Build Version

          - pwsh: echo "##vso[task.setvariable variable=solutionVersion;]$(NBGV_SimpleVersion).$(Build.BuildId)"
            displayName: Set Solutions Version

          - pwsh: |
               git config --global user.email "pipeline@azure.com"
               git config --global user.name "Pipeline Azure"
               git fetch
               git checkout $(BRANCH_NAME)
            displayName: Checking out git repo

          - task: PowerPlatformToolInstaller@2
            displayName: Installing tools
            inputs:
              DefaultVersion: true

          - ${{ each step in parameters.beforeSolutionExportUsersteps }}:
            - ${{ each pair in step }}:
                ${{ pair.key }}: ${{ pair.value }}

          - ${{ each solution in parameters.solutions }}:
            - task: PowerPlatformSetSolutionVersion@2
              displayName: Setting ${{ solution }} version
              inputs:
                authenticationType: PowerPlatformSPN
                PowerPlatformSPN: '${{ parameters.PowerPlatformSPN }}'
                SolutionName: ${{ solution }}
                SolutionVersionNumber: $(solutionVersion)

            - task: PowerPlatformExportSolution@2
              displayName: Exporting Managed ${{ solution }}
              inputs:
                authenticationType: 'PowerPlatformSPN'
                PowerPlatformSPN: '${{ parameters.PowerPlatformSPN }}'
                SolutionName: '${{ solution }}'
                SolutionOutputFile: '$(Build.ArtifactStagingDirectory)/${{ solution }}_managed.zip'
                Managed: true
                AsyncOperation: true
                MaxAsyncWaitTime: '60'

            - ${{ if parameters.extractSolutions  }}:
              - task: PowerPlatformExportSolution@2
                displayName: Exporting ${{ solution }}
                inputs:
                  authenticationType: 'PowerPlatformSPN'
                  PowerPlatformSPN: '${{ parameters.PowerPlatformSPN }}'
                  SolutionName: ${{ solution }}
                  SolutionOutputFile: 'Export/${{ solution }}.zip'
                  AsyncOperation: true
                  MaxAsyncWaitTime: '60'
              - task: PowerPlatformUnpackSolution@2
                displayName: Extracting ${{ solution }}
                inputs:
                  SolutionInputFile: 'Export/${{ solution }}.zip'
                  SolutionTargetFolder: 'Solutions/${{ solution }}'
                  ProcessCanvasApps: true

          - ${{ if parameters.extractSolutions  }}:
            - pwsh: |
                git add Solutions/*
                git commit -m "$(Build.BuildNumber)"
                git push -u origin
              workingDirectory: $(Build.SourcesDirectory)
              displayName: Commiting customizations

          - publish: $(Build.ArtifactStagingDirectory)
            artifact: solutions
            displayName: Publishing artifacts

      - ${{ if not(parameters.disableQualityCheck) }}:
        - job: QualityChecks
          dependsOn: ExportSolutions
          steps:
            - download: current
              artifact: solutions
            - task: PowerPlatformToolInstaller@2
              displayName: Installing tools
              inputs:
                DefaultVersion: true

            - task: PowerPlatformChecker@2
              inputs:
                authenticationType: 'PowerPlatformSPN'
                PowerPlatformSPN: '${{ parameters.PowerPlatformSPN }}'
                FilesToAnalyze: '$(Pipeline.Workspace)/solutions/*.zip'
                RuleSet: '0ad12346-e108-40b8-a956-9a8f95ea18c9'

  - ${{ each environment in parameters.environments }}:
    - stage: ${{ replace(environment.name, '-', '_') }}
      jobs:
        - deployment: 
          environment: ${{ environment.name }}
          variables:
            - group: ${{ environment.variableGroup }}
          ${{ if not(eq(coalesce(environment.pool, ''), '')) }}:
            pool: ${{ environment.pool }}
          strategy:
            runOnce:
              preDeploy:
                steps:
                  - task: PowerPlatformToolInstaller@2
                    displayName: Installing tools
                    inputs:
                      DefaultVersion: true

                  - ${{ if or(eq(environment.setAdminModeOnDeploy, ''), eq(environment.setAdminModeOnDeploy, true)) }} :
                    - task: PowerShell@2
                      displayName: Setting Environment in Admin Mode
                      targetType: 'filePath'
                      filePath: '${{ variables.xrmFrameworkPath }}/scripts/SetEnvironmentRuntimeState/SetEnvironmentRuntimeState.ps1'
                      inputs: >
                        - authenticationType: 'PowerPlatformSPN'
                        - PowerPlatformSPN: '${{ coalesce(environment.PowerPlatformSPN, parameters.PowerPlatformSPN) }}'
                        - runtimeState: 'AdminMode'

                  - ${{ if or(eq(environment.backupEnvironmentOnDeploy, ''), eq(environment.backupEnvironmentOnDeploy, true)) }} :
                    - task: PowerPlatformBackupEnvironment@2
                      inputs:
                        authenticationType: 'PowerPlatformSPN'
                        PowerPlatformSPN: '${{ coalesce(environment.PowerPlatformSPN, parameters.PowerPlatformSPN) }}'
                        BackupLabel: 'Backup before $(Build.BuildNumber)'

              deploy:
                steps:
                  - download: current
                    artifact: solutions

                  - ${{ if not(eq(length(parameters.azureFunctions), 0)) }}:
                    - download: current
                      artifact: azureFunctions

                  - ${{ if not(eq(length(parameters.webApplications), 0)) }}:
                    - download: current
                      artifact: webApplications

                  - task: PowerPlatformToolInstaller@2
                    displayName: Installing tools
                    inputs:
                      DefaultVersion: true

                  - ${{ each solution in parameters.solutionsImportOrder }}:
                    - task: PowerPlatformImportSolution@2
                      displayName: Installing ${{ solution }}
                      condition: and(succeeded(), not(contains(format('{0},', variables.SolutionsToIgnore), '${{ solution }},')), not(contains(format('{0},', variables.SolutionsToUpgrade), '${{ solution }},')))
                      inputs:
                        authenticationType: 'PowerPlatformSPN'
                        PowerPlatformSPN: '${{ coalesce(environment.PowerPlatformSPN, parameters.PowerPlatformSPN) }}'
                        SolutionInputFile: '$(Pipeline.Workspace)/solutions/${{ solution }}_managed.zip'
                        AsyncOperation: true
                        MaxAsyncWaitTime: '60'

                    - task: PowerPlatformImportSolution@2
                      displayName: Installing Holding ${{ solution }}
                      condition: and(succeeded(), not(contains(format('{0},', variables.SolutionsToIgnore), '${{ solution }},')), contains(format('{0},', variables.SolutionsToUpgrade), '${{ solution }},'))
                      inputs:
                        authenticationType: 'PowerPlatformSPN'
                        PowerPlatformSPN: '${{ coalesce(environment.PowerPlatformSPN, parameters.PowerPlatformSPN) }}'
                        SolutionInputFile: '$(Pipeline.Workspace)/solutions/${{ solution }}_managed.zip'
                        AsyncOperation: true
                        MaxAsyncWaitTime: '60'
                        HoldingSolution: true

                  - ${{ each solution in parameters.solutionsImportOrder }}:
                    - task: PowerPlatformApplySolutionUpgrade@2
                      displayName: Applying Upgrade for ${{ solution }}
                      condition: and(succeeded(), not(contains(format('{0},', variables.SolutionsToIgnore), '${{ solution }},')), contains(format('{0},', variables.SolutionsToUpgrade), '${{ solution }},'))
                      inputs:
                        authenticationType: 'PowerPlatformSPN'
                        PowerPlatformSPN: '${{ coalesce(environment.PowerPlatformSPN, parameters.PowerPlatformSPN) }}'
                        SolutionName: '${{ solution }}'
                        AsyncOperation: true
                        MaxAsyncWaitTime: '120'

                  - ${{ each azureFunction in parameters.azureFunctions }}:
                    - ${{ each functionEnv in azureFunction.environments }}:
                      - ${{ if eq(functionEnv.name, environment.name) }} :
                        - task: AzureFunctionApp@1
                          displayName: 'Deploying Function ${{ azureFunction.name }}'
                          inputs:
                            azureSubscription: '${{ coalesce(functionEnv.azureSubscription, azureFunction.azureSubscription) }}'
                            appType: 'functionApp'
                            appName: '${{ coalesce(functionEnv.appName, azureFunction.appName) }}'
                            ${{ if not(eq(functionEnv.slotName, '')) }}:
                              deployToSlotOrASE: true
                              resourceGroupName: '${{ functionEnv.resourceGroupName }}'
                              slotName: '${{ functionEnv.slotName }}'
                            package: '$(Pipeline.Workspace)/azureFunctions/${{ azureFunction.name }}.zip'
                            deploymentMethod: 'auto'

                  - ${{ each webApp in parameters.webApplications }}:
                    - ${{ each webAppEnv in webApp.environments }}:
                      - ${{ if eq(webAppEnv.name, environment.name) }} :
                        - task: AzureWebApp@1
                          inputs:
                            azureSubscription: '${{ coalesce(webAppEnv.azureSubscription, webApp.azureSubscription) }}'
                            appType: '${{ coalesce(webAppEnv.appType, webApp.appType) }}'
                            appName: '${{ coalesce(webAppEnv.appName, webApp.appName) }}'
                            ${{ if not(eq(webAppEnv.slotName, '')) }}:
                              deployToSlotOrASE: true
                              resourceGroupName: '${{ webAppEnv.resourceGroupName }}'
                              slotName: '${{ webAppEnv.slotName }}'
                            package: '$(Pipeline.Workspace)/webApplications/${{ webApp.name }}.zip'
                            deploymentMethod: 'auto'

              on:
                success:
                  steps:
                    - ${{ if or(eq(environment.setAdminModeOnDeploy, ''), eq(environment.setAdminModeOnDeploy, true)) }} :
                        - task: PowerShell@2
                          displayName: Opening Environment access
                          targetType: 'filePath'
                          filePath: '${{ variables.xrmFrameworkPath }}/scripts/SetEnvironmentRuntimeState/SetEnvironmentRuntimeState.ps1'
                          inputs: >
                            - authenticationType: 'PowerPlatformSPN'
                            - PowerPlatformSPN: '${{ coalesce(environment.PowerPlatformSPN, parameters.PowerPlatformSPN) }}'
                            - runtimeState: 'Enabled'
                          
                    - ${{ if not(eq(environment.retentionDays, '')) }}:
                        - task: PowerShell@2
                          condition: and(succeeded(), not(canceled()))
                          name: RetainOnSuccess
                          displayName: Retain on Success
                          inputs:
                            failOnStderr: true
                            targetType: 'inline'
                            script: |
                              $contentType = "application/json";
                              $headers = @{ Authorization = 'Bearer $(System.AccessToken)' };
                              $rawRequest = @{ daysValid = $(environment.retentionDays); definitionId = $(System.DefinitionId); ownerId = 'User:$(Build.RequestedForId)'; protectPipeline = $false; runId = $(Build.BuildId) };
                              $request = ConvertTo-Json @($rawRequest);
                              $uri = "$(System.CollectionUri)$(System.TeamProject)/_apis/build/retention/leases?api-version=6.0-preview.1";
                              Invoke-RestMethod -uri $uri -method POST -Headers $headers -ContentType $contentType -Body $request;
